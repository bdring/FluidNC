; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[platformio]
src_dir = FluidNC/src
include_dir = FluidNC/include
test_dir = FluidNC/tests
data_dir = FluidNC/data
default_envs = wifi
extra_configs=
    platformio_override.ini
    ;debug.ini

[common_env_data]
lib_deps_builtin = 
	SPI

[common]
build_flags = 
	!python git-version.py
	-DCORE_DEBUG_LEVEL=0
	-Wno-unused-variable
	-Wno-unused-function
lib_deps =
	TMCStepper@>=0.7.0,<1.0.0
	thingpulse/ESP8266 and ESP32 OLED driver for SSD1306 displays@4.4.1
bt_deps =
	BluetoothSerial
wifi_deps =
	arduinoWebSockets=https://github.com/MitchBradley/arduinoWebSockets#canSend3
        ; arduinoWebSockets=https://github.com/Links2004/arduinoWebSockets
	WiFi=https://github.com/MitchBradley/WiFi#canWrite
        ; If we include the following explicit dependencies when we get the
        ; Arduino framework code from github, platformio picks up different
        ; and incompatible versions of these libraries from who knows where, 
	; ArduinoOTA
	; DNSServer
	; ESPmDNS
	; Update
	; WebServer
	; WiFi
	; WiFiClientSecure

[common_esp32_base]
platform = https://github.com/platformio/platform-espressif32.git
framework = arduino
platform_packages = platformio/framework-arduinoespressif32@^3.20017.241212
board_build.arduino.upstream_packages = no

upload_speed = 921600
board_build.partitions = min_littlefs.csv ; For 4M ESP32
board_build.filesystem = littlefs
; board_build.partitions = FluidNC/ld/esp32/app3M_spiffs1M_8MB.csv  ; For 8Meg ESP32
; board_build.partitions = FluidNC/ld/esp32/app3M_spiffs9M_16MB.csv ; For 16Meg ESP32
monitor_speed = 115200
monitor_flags = 
	--eol=LF
monitor_filters=esp32_exception_decoder
board_build.f_flash = 80000000L
build_unflags = -std=gnu++11
build_flags =
    ${common.build_flags} -std=gnu++17 -D_GLIBCXX_HAVE_DIRENT_H -D__FLUIDNC
    -IFluidNC/esp32
; -lstdc++fs
build_src_filter =
	+<**/*.h> +<**/*.s> +<**/*.S> +<**/*.cpp> +<**/*.c>
        +<../stdfs>
        -<WebUI>
        -<BTConfig.cpp>
        ; -<OLED.cpp>

lib_extra_dirs = 
	libraries

[common_esp32]
extends = common_esp32_base
extra_scripts =	FluidNC/ld/esp32/vtable_in_dram.py
board = esp32dev
build_src_filter =
    +<../esp32/*.c>
    +<../esp32/*.cpp>
    +<../esp32/esp32/*.c>
    +<../esp32/esp32/*.cpp>
build_flags =
    ${common_esp32_base.build_flags}
    -IFluidNC/esp32/esp32

[common_esp32s3]
extends = common_esp32_base
extra_scripts =	FluidNC/ld/esp32s3/vtable_in_dram.py
board = esp32-s3-devkitc-1
build_src_filter =
    ${common_esp32_base.build_src_filter}
    +<../esp32/*.c>
    +<../esp32/*.cpp>
    +<../esp32/esp32s3/*.c>
    +<../esp32/esp32s3/*.cpp>
build_flags =
    ${common_esp32_base.build_flags}
    -IFluidNC/esp32/esp32s3

[common_wifi]
build_src_filter = +<WebUI>
build_flags =

[common_bt]
build_src_filter = +<BTConfig.cpp> +<WebUI/WebCommands.cpp>
build_flags =

[env:debug]
extends = common_esp32
build_type = debug
lib_deps = ${common.lib_deps}

[env:noradio]
extends = common_esp32
lib_deps = ${common.lib_deps}
build_src_filter =
    ${common_esp32_base.build_src_filter}
    ${common_esp32.build_src_filter}

[env:wifi]
extends = common_esp32
lib_deps = ${common.lib_deps} ${common.wifi_deps}
build_src_filter =
    ${env:noradio.build_src_filter}
    ${common_wifi.build_src_filter}

[env:bt]
extends = common_esp32
lib_deps = ${common.lib_deps} ${common.bt_deps}
build_src_filter =
    ${env:noradio.build_src_filter}
    ${common_bt.build_src_filter}

[env:noradio_s3]
extends = common_esp32s3
lib_deps = ${common.lib_deps}
build_src_filter =
    ${common_esp32_base.build_src_filter}
    ${common_esp32s3.build_src_filter}
build_flags =
    ${common_esp32s3.build_flags}

[env:wifi_s3]
extends = common_esp32s3
lib_deps = ${common.lib_deps} ${common.wifi_deps}
build_src_filter =
    ${env:noradio_s3.build_src_filter}
    ${common_wifi.build_src_filter}
build_flags =
    ${env:noradio_s3.build_flags}
    ${common_wifi.build_flags}

; [env:bt_s3]
; extends = common_esp32s3
; lib_deps = ${common.lib_deps} ${common.bt_deps}
; build_src_filter =
;     ${env:noradio_s3.build_src_filter}
;     ${common_bt.build_src_filter}
; build_flags =
;     ${env:noradio_s3.build_flags}
;     ${common_bt.build_flags}
; 
; [env:wifibt_s3]
; extends = common_esp32s3
; lib_deps = ${common.lib_deps} ${common.bt_deps} ${common.wifi_deps}
; build_src_filter =
;     ${env:noradio_s3.build_src_filter}
;     ${common_wifi.build_src_filter}
;     ${common_bt.build_src_filter}

[env:noradio_s3_cdc]
extends = common_esp32s3, noradio_s3
lib_deps = ${common.lib_deps}
build_flags =
    ${env:noradio_s3.build_flags}
    -DARDUINO_USB_CDC_ON_BOOT=1

[env:wifi_s3_cdc]
extends = common_esp32s3, wifi_s3
lib_deps = ${common.lib_deps} ${common.wifi_deps}
build_flags =
    ${env:wifi_s3.build_flags}
    -DARDUINO_USB_CDC_ON_BOOT=1

; [env:bt_s3_cdc]
; extends = common_esp32s3, bt_s3
; build_flags =
;     ${env:bt_s3.build_flags}           
;     -DARDUINO_USB_CDC_ON_BOOT=1
; 
; [env:wifibt_s3_cdc]
; extends = common_esp32s3, wifibt_s3
; lib_deps = ${common.lib_deps} ${common.wifi_deps} ${common.bt_deps}
; build_flags =
;     ${env:wifibt_s3.build_flags}
;     -DARDUINO_USB_CDC_ON_BOOT=1

[env:native]
lib_ldf_mode = chain
platform = windows_x86
test_build_src = true
build_src_filter =
    +<**/*.h> +<**/*.s> +<**/*.S> +<**/*.cpp> +<**/*.c>
    +<../capture>
    -<I2SOut.cpp>
    -<Machine/I2CBus.cpp>
    -<BTConfig.cpp>
    -<Motors/Trinamic*.cpp>
    -<Motors/TMC*.cpp>
    -<Motors/*Servo.cpp>
    -<Motors/Dynamixel2.cpp>
    -<Motors/Solenoid.cpp>
    -<Pins/DebugPinDetail.cpp>
    -<WebUI>
    -<OLED*.cpp>
    -<SSD1306_I2C.cpp>
 
build_flags =
    -std=gnu++23
    -lcomdlg32
    -limagehlp
    ;-IX86TestSupport
    ;-IX86TestSupport/TestSupport
    -IFluidNC/capture

lib_compat_mode = off
#lib_deps =
#     google/googletest @ ^1.10.0
#lib_extra_dirs =
# 	X86TestSupport

# The following are for "pio test"
[tests_common]
platform = native
test_framework = googletest
test_build_src = true
build_src_filter = +<Pins/PinOptionsParser.cpp> +<string_util.cpp> +<test_main.cpp>
build_flags = -std=c++17 -g

# sanitize only works with clang / LLVM
[env:tests]
extends = tests_common
build_flags = ${tests_common.build_flags} -fsanitize=address,undefined

[env:tests_nosan]
extends = tests_common
build_src_filter = ${tests_common.build_src_filter}
build_flags = ${tests_common.build_flags}
